{"ast":null,"code":"var _jsxFileName = \"/Users/williamberggren/Documents/pwa/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useWorker } from 'react-hooks-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createContactsWorker = () => new Worker(`${process.env.PUBLIC_URL}/ContactWorker.js`);\nfunction Contacts() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName\n    };\n    setContacts(prevContacts => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n  const deleteContact = id => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== id));\n  };\n  const {\n    result: sortedContacts\n  } = useWorker(createContactsWorker, ['sort', contacts]);\n  const {\n    result: duplicatedContacts\n  } = useWorker(createContactsWorker, ['duplicate', contacts]);\n  useEffect(() => {\n    if (duplicatedContacts) {\n      setContacts(duplicatedContacts);\n    }\n  }, [duplicatedContacts]);\n  useEffect(() => {\n    if (sortedContacts) {\n      setContacts(sortedContacts);\n    }\n  }, [sortedContacts]);\n  const duplicateContacts = () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n    contactsWorker.postMessage(['duplicate', contacts]);\n  };\n  const sortContacts = () => {\n    contactsWorker.postMessage(['sort', contacts]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contacts,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.addContactContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.contactNameInput,\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.addContactButton,\n        onClick: addContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"duplicateContactsButton\",\n        className: styles.duplicateButton,\n        onClick: duplicateContacts,\n        children: \"Duplicate Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.sortButton,\n      onClick: sortContacts,\n      children: \"Sort Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.contactList,\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.contactItem,\n        \"data-testid\": \"contactItem\",\n        children: [contact.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.deleteButton,\n          onClick: () => deleteContact(contact.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Contacts, \"zLHL/hWV10zx8tHrTfhkaheiby8=\", false, function () {\n  return [useWorker, useWorker];\n});\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","useEffect","styles","v4","uuidv4","useWorker","jsxDEV","_jsxDEV","createContactsWorker","Worker","process","env","PUBLIC_URL","Contacts","_s","contacts","setContacts","newContactName","setNewContactName","addContact","trim","alert","newContact","id","name","prevContacts","deleteContact","filter","contact","result","sortedContacts","duplicatedContacts","duplicateContacts","length","contactsWorker","postMessage","sortContacts","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","addContactContainer","contactNameInput","type","placeholder","value","onChange","e","target","addContactButton","onClick","duplicateButton","sortButton","contactList","map","contactItem","deleteButton","_c","$RefreshReg$"],"sources":["/Users/williamberggren/Documents/pwa/src/components/Contacts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useWorker } from 'react-hooks-worker';\nconst createContactsWorker = () => new Worker(`${process.env.PUBLIC_URL}/ContactWorker.js`);\n  \n\nfunction Contacts() {\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName,\n    };\n\n    setContacts((prevContacts) => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n\n  const deleteContact = (id) => {\n    setContacts((prevContacts) => prevContacts.filter((contact) => contact.id !== id));\n  };\n\n  const { result: sortedContacts } = useWorker(createContactsWorker, ['sort', contacts]);\n  const { result: duplicatedContacts } = useWorker(createContactsWorker, ['duplicate', contacts]);\n\n\n  useEffect(() => {\n    if (duplicatedContacts) {\n      setContacts(duplicatedContacts);\n    }\n  }, [duplicatedContacts]);\n\n  useEffect(() => {\n    if (sortedContacts) {\n      setContacts(sortedContacts);\n    }\n  }, [sortedContacts]);\n\n  const duplicateContacts = () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n\n    contactsWorker.postMessage(['duplicate', contacts]);\n  };\n\n  const sortContacts = () => {\n    contactsWorker.postMessage(['sort', contacts]);\n  };\n\n  return (\n    <div className={styles.contacts}>\n      <h1 className={styles.title}>Contacts</h1>\n      <div className={styles.addContactContainer}>\n        <input\n          className={styles.contactNameInput}\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          value={newContactName}\n          onChange={(e) => setNewContactName(e.target.value)}\n        />\n        <button className={styles.addContactButton} onClick={addContact}>\n          Add Contact\n        </button>\n        <button data-testid=\"duplicateContactsButton\" className={styles.duplicateButton} onClick={duplicateContacts}>\n          Duplicate Contacts\n        </button>\n      </div>\n      <button className={styles.sortButton} onClick={sortContacts}>\n        Sort Contacts\n      </button>\n      <ul className={styles.contactList}>\n        {contacts.map((contact) => (\n          <li key={contact.id} className={styles.contactItem} data-testid=\"contactItem\">\n            {contact.name}{' '}\n            <button className={styles.deleteButton} onClick={() => deleteContact(contact.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}