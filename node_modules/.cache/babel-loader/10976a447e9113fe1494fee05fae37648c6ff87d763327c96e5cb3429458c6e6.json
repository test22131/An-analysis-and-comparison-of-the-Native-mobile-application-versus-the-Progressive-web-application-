{"ast":null,"code":"var _jsxFileName = \"/Users/williamberggren/Documents/pwa/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { wrap } from 'comlink';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst workerCode = self.onmessage = function (event) {\n  const {\n    type,\n    contacts\n  } = event.data;\n  switch (type) {\n    case 'duplicateContacts':\n      self.postMessage(duplicateContacts(contacts));\n      break;\n    case 'sortContacts':\n      self.postMessage(sortContacts(contacts));\n      break;\n    default:\n      break;\n  }\n};\nfunction duplicateContacts(contacts) {\n  const duplicatedContacts = [];\n  while (duplicatedContacts.length < 10000) {\n    duplicatedContacts.push(...contacts.map(contact => ({\n      ...contact,\n      id: SOME_UNIQUE_ID_GENERATOR()\n    })));\n  }\n  return {\n    type: 'duplicate',\n    data: duplicatedContacts\n  };\n}\nfunction sortContacts(contacts) {\n  return {\n    type: 'sort',\n    data: [...contacts].sort((a, b) => a.name.localeCompare(b.name))\n  };\n}\n;\nconst workerBlob = new Blob([workerCode], {\n  type: 'application/javascript'\n});\nconst workerUrl = URL.createObjectURL(workerBlob);\nconst worker = new Worker(workerUrl);\nfunction Contacts() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName\n    };\n    setContacts(prevContacts => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n  const deleteContact = id => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== id));\n  };\n  const duplicateContacts = async () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n    const {\n      data\n    } = await worker.duplicateContacts(contacts);\n    setContacts(data);\n  };\n  const sortContacts = async () => {\n    const {\n      data\n    } = await worker.sortContacts(contacts);\n    setContacts(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contacts,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.addContactContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.contactNameInput,\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.addContactButton,\n        onClick: addContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"duplicateContactsButton\",\n        className: styles.duplicateButton,\n        onClick: duplicateContacts,\n        children: \"Duplicate Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.sortButton,\n      onClick: sortContacts,\n      children: \"Sort Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.contactList,\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.contactItem,\n        \"data-testid\": \"contactItem\",\n        children: [contact.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.deleteButton,\n          onClick: () => deleteContact(contact.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Contacts, \"RZWg/5tRFF395CUJEvyX78umHzo=\");\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","useEffect","styles","v4","uuidv4","wrap","jsxDEV","_jsxDEV","workerCode","self","onmessage","event","type","contacts","data","postMessage","duplicateContacts","sortContacts","duplicatedContacts","length","push","map","contact","id","SOME_UNIQUE_ID_GENERATOR","sort","a","b","name","localeCompare","workerBlob","Blob","workerUrl","URL","createObjectURL","worker","Worker","Contacts","_s","setContacts","newContactName","setNewContactName","addContact","trim","alert","newContact","prevContacts","deleteContact","filter","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","addContactContainer","contactNameInput","placeholder","value","onChange","e","target","addContactButton","onClick","duplicateButton","sortButton","contactList","contactItem","deleteButton","_c","$RefreshReg$"],"sources":["/Users/williamberggren/Documents/pwa/src/components/Contacts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { wrap } from 'comlink';\n\n\nconst workerCode = \n    self.onmessage = function(event) {\n        const { type, contacts } = event.data;\n\n        switch (type) {\n            case 'duplicateContacts':\n                self.postMessage(duplicateContacts(contacts));\n                break;\n            case 'sortContacts':\n                self.postMessage(sortContacts(contacts));\n                break;\n            default:\n                break;\n        }\n    }\n\n    function duplicateContacts(contacts) {\n        const duplicatedContacts = [];\n        while (duplicatedContacts.length < 10000) {\n            duplicatedContacts.push(...contacts.map((contact) => ({ ...contact, id: SOME_UNIQUE_ID_GENERATOR() })));\n        }\n        return { type: 'duplicate', data: duplicatedContacts };\n    }\n\n    function sortContacts(contacts) {\n        return { type: 'sort', data: [...contacts].sort((a, b) => a.name.localeCompare(b.name)) };\n    }\n;\n\nconst workerBlob = new Blob([workerCode], { type: 'application/javascript' });\nconst workerUrl = URL.createObjectURL(workerBlob);\nconst worker = new Worker(workerUrl);\n\n\n  \n\nfunction Contacts() {\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName,\n    };\n\n    setContacts((prevContacts) => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n\n  const deleteContact = (id) => {\n    setContacts((prevContacts) => prevContacts.filter((contact) => contact.id !== id));\n  };\n\n\n  const duplicateContacts = async () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n\n    const { data } = await worker.duplicateContacts(contacts);\n    setContacts(data);\n  };\n\n  const sortContacts = async () => {\n    const { data } = await worker.sortContacts(contacts);\n    setContacts(data);\n  };\n\n  return (\n    <div className={styles.contacts}>\n      <h1 className={styles.title}>Contacts</h1>\n      <div className={styles.addContactContainer}>\n        <input\n          className={styles.contactNameInput}\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          value={newContactName}\n          onChange={(e) => setNewContactName(e.target.value)}\n        />\n        <button className={styles.addContactButton} onClick={addContact}>\n          Add Contact\n        </button>\n        <button data-testid=\"duplicateContactsButton\" className={styles.duplicateButton} onClick={duplicateContacts}>\n          Duplicate Contacts\n        </button>\n      </div>\n      <button className={styles.sortButton} onClick={sortContacts}>\n        Sort Contacts\n      </button>\n      <ul className={styles.contactList}>\n        {contacts.map((contact) => (\n          <li key={contact.id} className={styles.contactItem} data-testid=\"contactItem\">\n            {contact.name}{' '}\n            <button className={styles.deleteButton} onClick={() => deleteContact(contact.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}