{"ast":null,"code":"var _jsxFileName = \"/Users/williamberggren/Documents/pwa/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ContactList = () => {\n  _s();\n  const [contactNames, setContactNames] = useState([]);\n  useEffect(() => {\n    if ('contacts' in navigator && 'ContactsManager' in window) {\n      navigator.permissions.query({\n        name: 'contacts'\n      }).then(permissionStatus => {\n        if (permissionStatus.state === 'granted') {\n          // Permission already granted, fetch and set contact names\n          fetchContactNames();\n        } else if (permissionStatus.state === 'prompt') {\n          // Permission not yet granted, prompt the user\n          permissionStatus.onchange = () => {\n            if (permissionStatus.state === 'granted') {\n              // Permission granted, fetch and set contact names\n              fetchContactNames();\n            } else {\n              // Permission denied, handle accordingly\n            }\n          };\n        } else {\n          // Permission denied, handle accordingly\n        }\n      });\n    } else {\n      // Contacts API not supported, handle accordingly\n    }\n  }, []);\n  async function fetchContactNames() {\n    try {\n      const fetchedContacts = await navigator.contacts.select(['name'], {\n        multiple: true\n      });\n      const contactNames = fetchedContacts.map(contact => contact.name);\n      setContactNames(contactNames);\n    } catch (error) {\n      // Handle error\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: contactNames.map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: name\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactList, \"vwO4phr3UoAZ3KUxQmVoBXi9mNI=\");\n_c = ContactList;\nexport default ContactList;\nvar _c;\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","ContactList","_s","contactNames","setContactNames","navigator","window","permissions","query","name","then","permissionStatus","state","fetchContactNames","onchange","fetchedContacts","contacts","select","multiple","map","contact","error","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/williamberggren/Documents/pwa/src/components/Contacts.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst ContactList = () => {\n  const [contactNames, setContactNames] = useState([]);\n\n  useEffect(() => {\n    if ('contacts' in navigator && 'ContactsManager' in window) {\n      navigator.permissions.query({ name: 'contacts' }).then((permissionStatus) => {\n        if (permissionStatus.state === 'granted') {\n          // Permission already granted, fetch and set contact names\n          fetchContactNames();\n        } else if (permissionStatus.state === 'prompt') {\n          // Permission not yet granted, prompt the user\n          permissionStatus.onchange = () => {\n            if (permissionStatus.state === 'granted') {\n              // Permission granted, fetch and set contact names\n              fetchContactNames();\n            } else {\n              // Permission denied, handle accordingly\n            }\n          };\n        } else {\n          // Permission denied, handle accordingly\n        }\n      });\n    } else {\n      // Contacts API not supported, handle accordingly\n    }\n  }, []);\n\n  async function fetchContactNames() {\n    try {\n      const fetchedContacts = await navigator.contacts.select(['name'], {\n        multiple: true,\n      });\n\n      const contactNames = fetchedContacts.map((contact) => contact.name);\n      setContactNames(contactNames);\n    } catch (error) {\n      // Handle error\n    }\n  }\n\n  return (\n    <div>\n      <h2>Contact List</h2>\n      <ul>\n        {contactNames.map((name, index) => (\n          <li key={index}>{name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACd,IAAI,UAAU,IAAIQ,SAAS,IAAI,iBAAiB,IAAIC,MAAM,EAAE;MAC1DD,SAAS,CAACE,WAAW,CAACC,KAAK,CAAC;QAAEC,IAAI,EAAE;MAAW,CAAC,CAAC,CAACC,IAAI,CAAEC,gBAAgB,IAAK;QAC3E,IAAIA,gBAAgB,CAACC,KAAK,KAAK,SAAS,EAAE;UACxC;UACAC,iBAAiB,CAAC,CAAC;QACrB,CAAC,MAAM,IAAIF,gBAAgB,CAACC,KAAK,KAAK,QAAQ,EAAE;UAC9C;UACAD,gBAAgB,CAACG,QAAQ,GAAG,MAAM;YAChC,IAAIH,gBAAgB,CAACC,KAAK,KAAK,SAAS,EAAE;cACxC;cACAC,iBAAiB,CAAC,CAAC;YACrB,CAAC,MAAM;cACL;YAAA;UAEJ,CAAC;QACH,CAAC,MAAM;UACL;QAAA;MAEJ,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;IAAA;EAEJ,CAAC,EAAE,EAAE,CAAC;EAEN,eAAeA,iBAAiBA,CAAA,EAAG;IACjC,IAAI;MACF,MAAME,eAAe,GAAG,MAAMV,SAAS,CAACW,QAAQ,CAACC,MAAM,CAAC,CAAC,MAAM,CAAC,EAAE;QAChEC,QAAQ,EAAE;MACZ,CAAC,CAAC;MAEF,MAAMf,YAAY,GAAGY,eAAe,CAACI,GAAG,CAAEC,OAAO,IAAKA,OAAO,CAACX,IAAI,CAAC;MACnEL,eAAe,CAACD,YAAY,CAAC;IAC/B,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACd;IAAA;EAEJ;EAEA,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrB1B,OAAA;MAAAsB,QAAA,EACGnB,YAAY,CAACgB,GAAG,CAAC,CAACV,IAAI,EAAEkB,KAAK,kBAC5B3B,OAAA;QAAAsB,QAAA,EAAiBb;MAAI,GAAZkB,KAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAC3B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACxB,EAAA,CAnDID,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAqDjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}