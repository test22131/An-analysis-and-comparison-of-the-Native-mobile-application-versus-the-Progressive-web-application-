{"ast":null,"code":"var _jsxFileName = \"/Users/williamberggren/Documents/pwa/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst workerCode = `\nimportScripts('https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js');\n    self.onmessage = function(event) {\n        const { type, contacts } = event.data;\n\n        switch (type) {\n            case 'duplicateContacts':\n                self.postMessage(duplicateContacts(contacts));\n                break;\n            case 'sortContacts':\n                self.postMessage(sortContacts(contacts));\n                break;\n            default:\n                break;\n        }\n    }\n\n    function duplicateContacts(contacts) {\n      const duplicatedContacts = [];\n      while (duplicatedContacts.length < 10000) {\n          duplicatedContacts.push(...contacts.map((contact) => ({ ...contact, id: uuid.v4() })));\n      }\n      return { type: 'duplicate', data: duplicatedContacts };\n  }\n\n    function sortContacts(contacts) {\n        return { type: 'sort', data: [...contacts].sort((a, b) => a.name.localeCompare(b.name)) };\n    }\n    `;\nconst workerBlob = new Blob([workerCode], {\n  type: 'application/javascript'\n});\nconst workerUrl = URL.createObjectURL(workerBlob);\nconst worker = new Worker(workerUrl);\nfunction Contacts() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName\n    };\n    setContacts(prevContacts => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n  const deleteContact = id => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== id));\n  };\n  const duplicateContacts = async () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n    worker.postMessage({\n      type: 'duplicateContacts',\n      contacts: contacts\n    });\n  };\n  const sortContacts = () => {\n    worker.postMessage({\n      type: 'sortContacts',\n      contacts: contacts\n    });\n  };\n\n  // Handle responses from the worker\n  worker.onmessage = function (event) {\n    const {\n      type,\n      data\n    } = event.data;\n    switch (type) {\n      case 'duplicate':\n        setContacts(data);\n        break;\n      case 'sort':\n        setContacts(data);\n        break;\n      default:\n        break;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contacts,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.addContactContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.contactNameInput,\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.addContactButton,\n        onClick: addContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"duplicateContactsButton\",\n        className: styles.duplicateButton,\n        onClick: duplicateContacts,\n        children: \"Duplicate Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.sortButton,\n      onClick: sortContacts,\n      children: \"Sort Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.contactList,\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.contactItem,\n        \"data-testid\": \"contactItem\",\n        children: [contact.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.deleteButton,\n          onClick: () => deleteContact(contact.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(Contacts, \"RZWg/5tRFF395CUJEvyX78umHzo=\");\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","useEffect","styles","v4","uuidv4","jsxDEV","_jsxDEV","workerCode","workerBlob","Blob","type","workerUrl","URL","createObjectURL","worker","Worker","Contacts","_s","contacts","setContacts","newContactName","setNewContactName","addContact","trim","alert","newContact","id","name","prevContacts","deleteContact","filter","contact","duplicateContacts","length","postMessage","sortContacts","onmessage","event","data","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","addContactContainer","contactNameInput","placeholder","value","onChange","e","target","addContactButton","onClick","duplicateButton","sortButton","contactList","map","contactItem","deleteButton","_c","$RefreshReg$"],"sources":["/Users/williamberggren/Documents/pwa/src/components/Contacts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nconst workerCode = `\nimportScripts('https://cdnjs.cloudflare.com/ajax/libs/uuid/8.3.2/uuid.min.js');\n    self.onmessage = function(event) {\n        const { type, contacts } = event.data;\n\n        switch (type) {\n            case 'duplicateContacts':\n                self.postMessage(duplicateContacts(contacts));\n                break;\n            case 'sortContacts':\n                self.postMessage(sortContacts(contacts));\n                break;\n            default:\n                break;\n        }\n    }\n\n    function duplicateContacts(contacts) {\n      const duplicatedContacts = [];\n      while (duplicatedContacts.length < 10000) {\n          duplicatedContacts.push(...contacts.map((contact) => ({ ...contact, id: uuid.v4() })));\n      }\n      return { type: 'duplicate', data: duplicatedContacts };\n  }\n\n    function sortContacts(contacts) {\n        return { type: 'sort', data: [...contacts].sort((a, b) => a.name.localeCompare(b.name)) };\n    }\n    `;\n\nconst workerBlob = new Blob([workerCode], { type: 'application/javascript' });\nconst workerUrl = URL.createObjectURL(workerBlob);\nconst worker = new Worker(workerUrl);\n\n\n  \n\nfunction Contacts() {\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName,\n    };\n\n    setContacts((prevContacts) => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n\n  const deleteContact = (id) => {\n    setContacts((prevContacts) => prevContacts.filter((contact) => contact.id !== id));\n  };\n\n\n  const duplicateContacts = async () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n    worker.postMessage({ type: 'duplicateContacts', contacts: contacts });\n  };  \n\n    const sortContacts = () => {\n      worker.postMessage({ type: 'sortContacts', contacts: contacts });\n  };\n\n  // Handle responses from the worker\n  worker.onmessage = function(event) {\n    const { type, data } = event.data;\n    switch (type) {\n        case 'duplicate':\n            setContacts(data);\n            break;\n        case 'sort':\n            setContacts(data);\n            break;\n        default:\n            break;\n    }\n}\n\n\n  return (\n    <div className={styles.contacts}>\n      <h1 className={styles.title}>Contacts</h1>\n      <div className={styles.addContactContainer}>\n        <input\n          className={styles.contactNameInput}\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          value={newContactName}\n          onChange={(e) => setNewContactName(e.target.value)}\n        />\n        <button className={styles.addContactButton} onClick={addContact}>\n          Add Contact\n        </button>\n        <button data-testid=\"duplicateContactsButton\" className={styles.duplicateButton} onClick={duplicateContacts}>\n          Duplicate Contacts\n        </button>\n      </div>\n      <button className={styles.sortButton} onClick={sortContacts}>\n        Sort Contacts\n      </button>\n      <ul className={styles.contactList}>\n        {contacts.map((contact) => (\n          <li key={contact.id} className={styles.contactItem} data-testid=\"contactItem\">\n            {contact.name}{' '}\n            <button className={styles.deleteButton} onClick={() => deleteContact(contact.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}