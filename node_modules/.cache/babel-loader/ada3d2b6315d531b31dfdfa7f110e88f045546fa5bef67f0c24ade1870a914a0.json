{"ast":null,"code":"var _jsxFileName = \"/Users/williamberggren/Documents/pwa/src/components/Contacts.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useWorker } from 'react-hooks-worker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst createContactsWorker = () => {\n  console.log(`Worker path: ${process.env.PUBLIC_URL}/contactWorker.js`); // Logging the worker path\n  return new Worker(`${process.env.PUBLIC_URL}/contactWorker.js`);\n};\nfunction Contacts() {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName\n    };\n    setContacts(prevContacts => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n  const deleteContact = id => {\n    setContacts(prevContacts => prevContacts.filter(contact => contact.id !== id));\n  };\n  const {\n    result,\n    execute\n  } = useWorker(createContactsWorker, []);\n  console.log('useWorker return:', {\n    result,\n    execute\n  }); // Debugging line added here\n\n  useEffect(() => {\n    if ((result === null || result === void 0 ? void 0 : result.type) === 'duplicate') {\n      setContacts(result.data);\n    }\n    if ((result === null || result === void 0 ? void 0 : result.type) === 'sort') {\n      setContacts(result.data);\n    }\n  }, [result]);\n  const duplicateContacts = () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n    execute(['duplicate', contacts]);\n  };\n  const sortContacts = () => {\n    execute(['sort', contacts]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.contacts,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: styles.title,\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.addContactContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: styles.contactNameInput,\n        type: \"text\",\n        placeholder: \"Enter contact name\",\n        value: newContactName,\n        onChange: e => setNewContactName(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: styles.addContactButton,\n        onClick: addContact,\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        \"data-testid\": \"duplicateContactsButton\",\n        className: styles.duplicateButton,\n        onClick: duplicateContacts,\n        children: \"Duplicate Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.sortButton,\n      onClick: sortContacts,\n      children: \"Sort Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.contactList,\n      children: contacts.map(contact => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: styles.contactItem,\n        \"data-testid\": \"contactItem\",\n        children: [contact.name, ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          className: styles.deleteButton,\n          onClick: () => deleteContact(contact.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, contact.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Contacts, \"UAWzw1qhmhDT7KAaKh/Hv+D6LW4=\", false, function () {\n  return [useWorker];\n});\n_c = Contacts;\nexport default Contacts;\nvar _c;\n$RefreshReg$(_c, \"Contacts\");","map":{"version":3,"names":["React","useState","useEffect","styles","v4","uuidv4","useWorker","jsxDEV","_jsxDEV","createContactsWorker","console","log","process","env","PUBLIC_URL","Worker","Contacts","_s","contacts","setContacts","newContactName","setNewContactName","addContact","trim","alert","newContact","id","name","prevContacts","deleteContact","filter","contact","result","execute","type","data","duplicateContacts","length","sortContacts","className","children","title","fileName","_jsxFileName","lineNumber","columnNumber","addContactContainer","contactNameInput","placeholder","value","onChange","e","target","addContactButton","onClick","duplicateButton","sortButton","contactList","map","contactItem","deleteButton","_c","$RefreshReg$"],"sources":["/Users/williamberggren/Documents/pwa/src/components/Contacts.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from './Contacts.module.css';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useWorker } from 'react-hooks-worker';\nconst createContactsWorker = () => {\n  console.log(`Worker path: ${process.env.PUBLIC_URL}/contactWorker.js`); // Logging the worker path\n  return new Worker(`${process.env.PUBLIC_URL}/contactWorker.js`);\n};\n\n  \n\nfunction Contacts() {\n  const [contacts, setContacts] = useState([]);\n  const [newContactName, setNewContactName] = useState('');\n\n  const addContact = () => {\n    if (newContactName.trim() === '') {\n      alert('Please enter a contact name.');\n      return;\n    }\n\n    const newContact = {\n      id: uuidv4(),\n      name: newContactName,\n    };\n\n    setContacts((prevContacts) => [...prevContacts, newContact]);\n    setNewContactName('');\n  };\n\n  const deleteContact = (id) => {\n    setContacts((prevContacts) => prevContacts.filter((contact) => contact.id !== id));\n  };\n\n  const { result, execute } = useWorker(createContactsWorker, []);\n  console.log('useWorker return:', { result, execute }); // Debugging line added here\n\n  useEffect(() => {\n    if (result?.type === 'duplicate') {\n      setContacts(result.data);\n    }\n    if (result?.type === 'sort') {\n      setContacts(result.data);\n    }\n  }, [result]);\n\n  const duplicateContacts = () => {\n    if (contacts.length === 0) {\n      alert('No contacts to duplicate.');\n      return;\n    }\n\n    execute(['duplicate', contacts]);\n  };\n\n  const sortContacts = () => {\n    execute(['sort', contacts]);\n  };\n\n  return (\n    <div className={styles.contacts}>\n      <h1 className={styles.title}>Contacts</h1>\n      <div className={styles.addContactContainer}>\n        <input\n          className={styles.contactNameInput}\n          type=\"text\"\n          placeholder=\"Enter contact name\"\n          value={newContactName}\n          onChange={(e) => setNewContactName(e.target.value)}\n        />\n        <button className={styles.addContactButton} onClick={addContact}>\n          Add Contact\n        </button>\n        <button data-testid=\"duplicateContactsButton\" className={styles.duplicateButton} onClick={duplicateContacts}>\n          Duplicate Contacts\n        </button>\n      </div>\n      <button className={styles.sortButton} onClick={sortContacts}>\n        Sort Contacts\n      </button>\n      <ul className={styles.contactList}>\n        {contacts.map((contact) => (\n          <li key={contact.id} className={styles.contactItem} data-testid=\"contactItem\">\n            {contact.name}{' '}\n            <button className={styles.deleteButton} onClick={() => deleteContact(contact.id)}>\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Contacts;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}