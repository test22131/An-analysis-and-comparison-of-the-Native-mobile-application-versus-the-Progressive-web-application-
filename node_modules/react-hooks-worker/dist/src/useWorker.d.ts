declare type State<Result> = {
    result?: Result;
    error?: 'error' | 'messageerror';
};
/**
 * use worker
 *
 * The createWorker function should be stable to keep the worker running.
 * If it's referentially changed, it will create a new worker and terminate the old one.
 *
 * @example
 *
 * import { useWorker } from 'react-hooks-worker';
 *
 * const createWorker = () => new Worker(new URL('./slow_fib.worker', import.meta.url));
 *
 * const CalcFib = ({ count }) => {
 *   const { result, error } = useWorker(createWorker, count);
 *   if (error) return <div>Error: {error}</div>;
 *   return <div>Result: {result}</div>;
 * };
 */
export declare function useWorker<Input, Result>(createWorker: () => Worker, input: Input, getOptions?: () => WindowPostMessageOptions): State<Result>;
export {};
